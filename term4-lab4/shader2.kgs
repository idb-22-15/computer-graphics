<?xml version="1.0" encoding="utf-8"?>
<project vert=" varying vec2 texCoord;&#xD; varying vec3 Normal;&#xD; &#xD; void main(void)&#xD; {&#xD;    gl_Position =  gl_ProjectionMatrix * gl_ModelViewMatrix*(gl_Vertex);&#xD;    texCoord = gl_MultiTexCoord0.xy;&#xD;    Normal = normalize(gl_Normal);&#xD; }" pix="#version 330 core&#xD;&#xD;in vec2 texCoord;&#xD;in vec3 Normal;&#xD;&#xD;uniform sampler2D iTexture0;&#xD;&#xD;out vec4 FragColor;&#xD;&#xD;void main() {&#xD;  vec2 uv = texCoord;&#xD;&#xD;  // Calculate the color from the butterfly pattern&#xD;  float f1 = sin(uv.x * 3.1415926535 * 10.0);&#xD;  float f2 = sin(uv.y * 3.1415926535 * 10.0);&#xD;  vec3 color1 = vec3(0.5, 0.2, 0.0);&#xD;  vec3 color2 = vec3(0.8, 0.5, 0.2);&#xD;  vec3 color = mix(color1, color2, abs(f1 + f2));&#xD;&#xD;  // Add some noise to create a more organic pattern&#xD;  color += 0.1 * vec3(fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453));&#xD;  &#xD;  // Calculate the surface normal from the texture coordinates&#xD;  vec3 p = vec3(uv.x, uv.y, 0.0);&#xD;  vec3 dp1 = dFdx(p);&#xD;  vec3 dp2 = dFdy(p);&#xD;  vec3 normal = normalize(cross(dp1, dp2));&#xD;&#xD;  // Apply the lighting based on the surface normal&#xD;  vec3 lightDirection = normalize(vec3(0.0, 1.0, 0.0));&#xD;  float diffuse = max(dot(normal, lightDirection), 0.0);&#xD;  color *= diffuse * 0.5 + 0.5;&#xD;&#xD;  // Set the fragment color&#xD;  FragColor = vec4(color, 1.0);&#xD;}&#xD;" tt0="1" t0="D:\art\uni\projects\computer-graphics\term4-lab2-ilya\OpenGLrememberProj\texture.bmp" tt1="1" t1="D:\art\uni\projects\computer-graphics\term4-lab2-ilya\OpenGLrememberProj\texture.bmp" tt2="0" t2="" tt3="0" t3="" />